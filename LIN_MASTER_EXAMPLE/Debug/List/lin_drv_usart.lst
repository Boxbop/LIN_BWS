###############################################################################
#
# IAR C/C++ Compiler V6.50.1.797 for Atmel AVR            07/May/2015  12:33:41
# Copyright 1996-2014 IAR Systems AB.
# Standalone license - IAR Embedded Workbench 4K Kickstart edition for Atmel AVR 6.50
#
#    Source file  =  
#        C:\Users\lisa\Desktop\LIN_BWS\LIB_MCU\LIN_UART\lin_drv_usart.c
#    Command line =  
#        C:\Users\lisa\Desktop\LIN_BWS\LIB_MCU\LIN_UART\lin_drv_usart.c
#        --cpu=can128 -ms -o
#        C:\Users\lisa\Desktop\LIN_BWS\LIN_MASTER_EXAMPLE\Debug\Obj\ -lC
#        C:\Users\lisa\Desktop\LIN_BWS\LIN_MASTER_EXAMPLE\Debug\List\
#        --diag_suppress Pa082 -y --root_variables --no_cse --no_inline
#        --no_code_motion --no_cross_call --no_clustering --no_tbaa --debug
#        -DENABLE_BIT_DEFINITIONS -e -I
#        C:\Users\lisa\Desktop\LIN_BWS\LIN_MASTER_EXAMPLE\..\ -I
#        C:\Users\lisa\Desktop\LIN_BWS\LIN_MASTER_EXAMPLE\..\..\ -I
#        C:\Users\lisa\Desktop\LIN_BWS\LIN_MASTER_EXAMPLE\..\..\..\ -I
#        C:\Users\lisa\Desktop\LIN_BWS\LIN_MASTER_EXAMPLE\..\ -I
#        C:\Users\lisa\Desktop\LIN_BWS\LIN_MASTER_EXAMPLE\ --eeprom_size 4096
#        --clib -Ohz
#    List file    =  
#        C:\Users\lisa\Desktop\LIN_BWS\LIN_MASTER_EXAMPLE\Debug\List\lin_drv_usart.lst
#    Object file  =  
#        C:\Users\lisa\Desktop\LIN_BWS\LIN_MASTER_EXAMPLE\Debug\Obj\lin_drv_usart.r90
#
###############################################################################

C:\Users\lisa\Desktop\LIN_BWS\LIB_MCU\LIN_UART\lin_drv_usart.c
      1          /*
      2          **
      3          ****************************************************************************
      4          **
      5          **
      6          **             Copyright (c) 2004/2005 - Atmel Corporation
      7          **             Proprietary Information
      8          **
      9          ** Project    	: AVR LIN CONTROLLER EXAMPLE (USART)
     10          ** Module     	: LIN_DRV.C
     11          ** Description	: LIN v1.3 CONTROLLER (drivers)
     12          ** Target    	: ATMEGA48/88/168 and AT90CAN128
     13          ** Compiler    	: IAR Embedded Workbench 4.1
     14          **
     15          **
     16          ** Version :     Date:         Author:      Comment:
     17          **    1.0        5.1.2005    E.G.          Creation
     18          **
     19          **
     20          **
     21          **
     22          **
     23          **
     24          **
     25          **
     26          ** LICENSE -
     27          **
     28          ** ATMEL - 2004/2005
     29          ** All software programs are provided 'as is' without warranty of any kind:
     30          ** Atmel does not state the suitability of the provided materials for any
     31          ** purpose. Atmel hereby disclaim all warranties and conditions with regard
     32          ** to the provided software, including all implied warranties, fitness for
     33          ** a particular purpose, title and non-infringement.In no event will Atmel
     34          ** be liable for any indirect or consequential damages or any damages
     35          ** whatsoever resulting from the usage of the software program.
     36          ****************************************************************************
     37          **
     38          */
     39          
     40          /*_____ I N C L U D E - F I L E S ____________________________________________*/
     41          #include "config.h"

   \                                 In  segment ABSOLUTE, at 0xfa, root
   \   union <unnamed> volatile __io _A_CANMSG
   \                     _A_CANMSG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xf8, root
   \   union <unnamed> volatile __io _A_CANSTM
   \                     _A_CANSTM:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xf7, root
   \   union <unnamed> volatile __io _A_CANIDM1
   \                     _A_CANIDM1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xf6, root
   \   union <unnamed> volatile __io _A_CANIDM2
   \                     _A_CANIDM2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xf5, root
   \   union <unnamed> volatile __io _A_CANIDM3
   \                     _A_CANIDM3:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xf4, root
   \   union <unnamed> volatile __io _A_CANIDM4
   \                     _A_CANIDM4:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xf3, root
   \   union <unnamed> volatile __io _A_CANIDT1
   \                     _A_CANIDT1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xf2, root
   \   union <unnamed> volatile __io _A_CANIDT2
   \                     _A_CANIDT2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xf1, root
   \   union <unnamed> volatile __io _A_CANIDT3
   \                     _A_CANIDT3:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xf0, root
   \   union <unnamed> volatile __io _A_CANIDT4
   \                     _A_CANIDT4:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xef, root
   \   union <unnamed> volatile __io _A_CANCDMOB
   \                     _A_CANCDMOB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xee, root
   \   union <unnamed> volatile __io _A_CANSTMOB
   \                     _A_CANSTMOB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xed, root
   \   union <unnamed> volatile __io _A_CANPAGE
   \                     _A_CANPAGE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xec, root
   \   union <unnamed> volatile __io _A_CANHPMOB
   \                     _A_CANHPMOB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xeb, root
   \   union <unnamed> volatile __io _A_CANREC
   \                     _A_CANREC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xea, root
   \   union <unnamed> volatile __io _A_CANTEC
   \                     _A_CANTEC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xe8, root
   \   union <unnamed> volatile __io _A_CANTTC
   \                     _A_CANTTC:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xe6, root
   \   union <unnamed> volatile __io _A_CANTIM
   \                     _A_CANTIM:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xe5, root
   \   union <unnamed> volatile __io _A_CANTCON
   \                     _A_CANTCON:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xe4, root
   \   union <unnamed> volatile __io _A_CANBT3
   \                     _A_CANBT3:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xe3, root
   \   union <unnamed> volatile __io _A_CANBT2
   \                     _A_CANBT2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xe2, root
   \   union <unnamed> volatile __io _A_CANBT1
   \                     _A_CANBT1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xe1, root
   \   union <unnamed> volatile __io _A_CANSIT1
   \                     _A_CANSIT1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xe0, root
   \   union <unnamed> volatile __io _A_CANSIT2
   \                     _A_CANSIT2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xdf, root
   \   union <unnamed> volatile __io _A_CANIE1
   \                     _A_CANIE1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xde, root
   \   union <unnamed> volatile __io _A_CANIE2
   \                     _A_CANIE2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xdd, root
   \   union <unnamed> volatile __io _A_CANEN1
   \                     _A_CANEN1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xdc, root
   \   union <unnamed> volatile __io _A_CANEN2
   \                     _A_CANEN2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xdb, root
   \   union <unnamed> volatile __io _A_CANGIE
   \                     _A_CANGIE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xda, root
   \   union <unnamed> volatile __io _A_CANGIT
   \                     _A_CANGIT:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd9, root
   \   union <unnamed> volatile __io _A_CANGSTA
   \                     _A_CANGSTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xd8, root
   \   union <unnamed> volatile __io _A_CANGCON
   \                     _A_CANGCON:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xce, root
   \   union <unnamed> volatile __io _A_UDR1
   \                     _A_UDR1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xcc, root
   \   union <unnamed> volatile __io _A_UBRR1
   \                     _A_UBRR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xca, root
   \   union <unnamed> volatile __io _A_UCSR1C
   \                     _A_UCSR1C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc9, root
   \   union <unnamed> volatile __io _A_UCSR1B
   \                     _A_UCSR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc8, root
   \   union <unnamed> volatile __io _A_UCSR1A
   \                     _A_UCSR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc6, root
   \   union <unnamed> volatile __io _A_UDR0
   \                     _A_UDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc4, root
   \   union <unnamed> volatile __io _A_UBRR0
   \                     _A_UBRR0:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0xc2, root
   \   union <unnamed> volatile __io _A_UCSR0C
   \                     _A_UCSR0C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc1, root
   \   union <unnamed> volatile __io _A_UCSR0B
   \                     _A_UCSR0B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xc0, root
   \   union <unnamed> volatile __io _A_UCSR0A
   \                     _A_UCSR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xbc, root
   \   union <unnamed> volatile __io _A_TWCR
   \                     _A_TWCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xbb, root
   \   union <unnamed> volatile __io _A_TWDR
   \                     _A_TWDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xba, root
   \   union <unnamed> volatile __io _A_TWAR
   \                     _A_TWAR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb9, root
   \   union <unnamed> volatile __io _A_TWSR
   \                     _A_TWSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb8, root
   \   union <unnamed> volatile __io _A_TWBR
   \                     _A_TWBR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb6, root
   \   union <unnamed> volatile __io _A_ASSR
   \                     _A_ASSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb3, root
   \   union <unnamed> volatile __io _A_OCR2A
   \                     _A_OCR2A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb2, root
   \   union <unnamed> volatile __io _A_TCNT2
   \                     _A_TCNT2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0xb0, root
   \   union <unnamed> volatile __io _A_TCCR2A
   \                     _A_TCCR2A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x9c, root
   \   union <unnamed> volatile __io _A_OCR3C
   \                     _A_OCR3C:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x9a, root
   \   union <unnamed> volatile __io _A_OCR3B
   \                     _A_OCR3B:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x98, root
   \   union <unnamed> volatile __io _A_OCR3A
   \                     _A_OCR3A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x96, root
   \   union <unnamed> volatile __io _A_ICR3
   \                     _A_ICR3:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x94, root
   \   union <unnamed> volatile __io _A_TCNT3
   \                     _A_TCNT3:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x92, root
   \   union <unnamed> volatile __io _A_TCCR3C
   \                     _A_TCCR3C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x91, root
   \   union <unnamed> volatile __io _A_TCCR3B
   \                     _A_TCCR3B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x90, root
   \   union <unnamed> volatile __io _A_TCCR3A
   \                     _A_TCCR3A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x8c, root
   \   union <unnamed> volatile __io _A_OCR1C
   \                     _A_OCR1C:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x8a, root
   \   union <unnamed> volatile __io _A_OCR1B
   \                     _A_OCR1B:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x88, root
   \   union <unnamed> volatile __io _A_OCR1A
   \                     _A_OCR1A:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x86, root
   \   union <unnamed> volatile __io _A_ICR1
   \                     _A_ICR1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x84, root
   \   union <unnamed> volatile __io _A_TCNT1
   \                     _A_TCNT1:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x82, root
   \   union <unnamed> volatile __io _A_TCCR1C
   \                     _A_TCCR1C:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x81, root
   \   union <unnamed> volatile __io _A_TCCR1B
   \                     _A_TCCR1B:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x80, root
   \   union <unnamed> volatile __io _A_TCCR1A
   \                     _A_TCCR1A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7f, root
   \   union <unnamed> volatile __io _A_DIDR1
   \                     _A_DIDR1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7e, root
   \   union <unnamed> volatile __io _A_DIDR0
   \                     _A_DIDR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7c, root
   \   union <unnamed> volatile __io _A_ADMUX
   \                     _A_ADMUX:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7b, root
   \   union <unnamed> volatile __io _A_ADCSRB
   \                     _A_ADCSRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x7a, root
   \   union <unnamed> volatile __io _A_ADCSRA
   \                     _A_ADCSRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x78, root
   \   union <unnamed> volatile __io _A_ADC
   \                     _A_ADC:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x75, root
   \   union <unnamed> volatile __io _A_XMCRB
   \                     _A_XMCRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x74, root
   \   union <unnamed> volatile __io _A_XMCRA
   \                     _A_XMCRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x71, root
   \   union <unnamed> volatile __io _A_TIMSK3
   \                     _A_TIMSK3:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x70, root
   \   union <unnamed> volatile __io _A_TIMSK2
   \                     _A_TIMSK2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6f, root
   \   union <unnamed> volatile __io _A_TIMSK1
   \                     _A_TIMSK1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6e, root
   \   union <unnamed> volatile __io _A_TIMSK0
   \                     _A_TIMSK0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x6a, root
   \   union <unnamed> volatile __io _A_EICRB
   \                     _A_EICRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x69, root
   \   union <unnamed> volatile __io _A_EICRA
   \                     _A_EICRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x66, root
   \   union <unnamed> volatile __io _A_OSCCAL
   \                     _A_OSCCAL:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x61, root
   \   union <unnamed> volatile __io _A_CLKPR
   \                     _A_CLKPR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x60, root
   \   union <unnamed> volatile __io _A_WDTCR
   \                     _A_WDTCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5f, root
   \   union <unnamed> volatile __io _A_SREG
   \                     _A_SREG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x5d, root
   \   union <unnamed> volatile __io _A_SP
   \                     _A_SP:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x5b, root
   \   union <unnamed> volatile __io _A_RAMPZ
   \                     _A_RAMPZ:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x57, root
   \   union <unnamed> volatile __io _A_SPMCSR
   \                     _A_SPMCSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x55, root
   \   union <unnamed> volatile __io _A_MCUCR
   \                     _A_MCUCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x54, root
   \   union <unnamed> volatile __io _A_MCUSR
   \                     _A_MCUSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x53, root
   \   union <unnamed> volatile __io _A_SMCR
   \                     _A_SMCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x51, root
   \   union <unnamed> volatile __io _A_OCDR
   \                     _A_OCDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x50, root
   \   union <unnamed> volatile __io _A_ACSR
   \                     _A_ACSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4e, root
   \   union <unnamed> volatile __io _A_SPDR
   \                     _A_SPDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4d, root
   \   union <unnamed> volatile __io _A_SPSR
   \                     _A_SPSR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4c, root
   \   union <unnamed> volatile __io _A_SPCR
   \                     _A_SPCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4b, root
   \   union <unnamed> volatile __io _A_GPIOR2
   \                     _A_GPIOR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x4a, root
   \   union <unnamed> volatile __io _A_GPIOR1
   \                     _A_GPIOR1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x47, root
   \   union <unnamed> volatile __io _A_OCR0A
   \                     _A_OCR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x46, root
   \   union <unnamed> volatile __io _A_TCNT0
   \                     _A_TCNT0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x44, root
   \   union <unnamed> volatile __io _A_TCCR0A
   \                     _A_TCCR0A:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x43, root
   \   union <unnamed> volatile __io _A_GTCCR
   \                     _A_GTCCR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x41, root
   \   union <unnamed> volatile __io _A_EEAR
   \                     _A_EEAR:
   \   00000000                      DS8 2

   \                                 In  segment ABSOLUTE, at 0x40, root
   \   union <unnamed> volatile __io _A_EEDR
   \                     _A_EEDR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3f, root
   \   union <unnamed> volatile __io _A_EECR
   \                     _A_EECR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3e, root
   \   union <unnamed> volatile __io _A_GPIOR0
   \                     _A_GPIOR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3d, root
   \   union <unnamed> volatile __io _A_EIMSK
   \                     _A_EIMSK:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x3c, root
   \   union <unnamed> volatile __io _A_EIFR
   \                     _A_EIFR:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x38, root
   \   union <unnamed> volatile __io _A_TIFR3
   \                     _A_TIFR3:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x37, root
   \   union <unnamed> volatile __io _A_TIFR2
   \                     _A_TIFR2:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x36, root
   \   union <unnamed> volatile __io _A_TIFR1
   \                     _A_TIFR1:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x35, root
   \   union <unnamed> volatile __io _A_TIFR0
   \                     _A_TIFR0:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x34, root
   \   union <unnamed> volatile __io _A_PORTG
   \                     _A_PORTG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x33, root
   \   union <unnamed> volatile __io _A_DDRG
   \                     _A_DDRG:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x32, root
   \   union <unnamed> volatile __io _A_PING
   \                     _A_PING:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x31, root
   \   union <unnamed> volatile __io _A_PORTF
   \                     _A_PORTF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x30, root
   \   union <unnamed> volatile __io _A_DDRF
   \                     _A_DDRF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2f, root
   \   union <unnamed> volatile __io _A_PINF
   \                     _A_PINF:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2e, root
   \   union <unnamed> volatile __io _A_PORTE
   \                     _A_PORTE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2d, root
   \   union <unnamed> volatile __io _A_DDRE
   \                     _A_DDRE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2c, root
   \   union <unnamed> volatile __io _A_PINE
   \                     _A_PINE:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2b, root
   \   union <unnamed> volatile __io _A_PORTD
   \                     _A_PORTD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x2a, root
   \   union <unnamed> volatile __io _A_DDRD
   \                     _A_DDRD:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x29, root
   \   union <unnamed> volatile __io _A_PIND
   \                     _A_PIND:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x28, root
   \   union <unnamed> volatile __io _A_PORTC
   \                     _A_PORTC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x27, root
   \   union <unnamed> volatile __io _A_DDRC
   \                     _A_DDRC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x26, root
   \   union <unnamed> volatile __io _A_PINC
   \                     _A_PINC:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x25, root
   \   union <unnamed> volatile __io _A_PORTB
   \                     _A_PORTB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x24, root
   \   union <unnamed> volatile __io _A_DDRB
   \                     _A_DDRB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x23, root
   \   union <unnamed> volatile __io _A_PINB
   \                     _A_PINB:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x22, root
   \   union <unnamed> volatile __io _A_PORTA
   \                     _A_PORTA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x21, root
   \   union <unnamed> volatile __io _A_DDRA
   \                     _A_DDRA:
   \   00000000                      DS8 1

   \                                 In  segment ABSOLUTE, at 0x20, root
   \   union <unnamed> volatile __io _A_PINA
   \                     _A_PINA:
   \   00000000                      DS8 1
     42          #include "lin_drv_usart.h"
     43          
     44          /*_____ G L O B A L S ________________________________________________________*/

   \                                 In  segment NEAR_Z, align 1, keep-with-next, root
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     45          volatile U8  _lin_id;          //without parity bits
   \                     _lin_id:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next, root
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     46          volatile U8  _lin_id_w_parity; //lin v1.3 identifier with computed parity bits
   \                     _lin_id_w_parity:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next, root
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     47          volatile U8  _lin_tab_data[8]; //8 bytes data buffer
   \                     _lin_tab_data:
   \   00000000                      DS8 8

   \                                 In  segment NEAR_Z, align 1, keep-with-next, root
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     48          volatile U8  _lin_index;      //index for data buffer
   \                     _lin_index:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next, root
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     49          volatile U8  _lin_status;
   \                     _lin_status:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next, root
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     50          volatile U8  _lin_err;    //lin error status
   \                     _lin_err:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next, root
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     51          volatile U8  _lin_state;  //lin state machine status
   \                     _lin_state:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next, root
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     52          volatile U8  _lin_cmd;    //lin current command
   \                     _lin_cmd:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next, root
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     53          volatile U8  _lin_cpt;    //counter
   \                     _lin_cpt:
   \   00000000                      DS8 1

   \                                 In  segment NEAR_Z, align 1, keep-with-next, root
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     54          volatile U16 _lin_crc;    //lin checksum
   \                     _lin_crc:
   \   00000000                      DS8 2
     55          
     56          #if LIN_CONFIG == 0 //1:slave 0:master

   \                                 In  segment NEAR_Z, align 1, keep-with-next, root
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
     57          volatile  U8 lin_master_in_sleep_mode;
   \                     lin_master_in_sleep_mode:
   \   00000000                      DS8 1
     58          #endif
     59          
     60          #ifdef _RUN_TIME_RC_CALIBRATION_ENABLE
     61          extern volatile U8 _lin_synchronized;    //lin is synchronized with master
     62          extern  volatile U8 osccal_start;
     63          #endif
     64          
     65          /*_____ P R I V A T E - F U N C T I O N S - D E C L A R A T I O N ____________*/
     66          /*_____ L O C A L S __________________________________________________________*/
     67          /*_____ P U B L I C - F U N C T I O N S ______________________________________*/
     68          /*_____ P R I V A T E - F U N C T I O N S ____________________________________*/
     69          
     70          
     71          #ifdef AT90CAN128_USED
     72          #ifdef USE_UART2 // Use UART2
     73          #pragma vector=USART0_RX_vect

   \                                 In  segment CODE, align 2, keep-with-next
     74          __interrupt void _lin_it_uart_rx_not_used (void){
   \                     _lin_it_uart_rx_not_used:
     75            ;
     76          }
   \   00000000   9518               RETI
     77          #pragma vector=USART1_RX_vect
     78          #endif
     79          
     80          #ifdef USE_UART1
     81          #pragma vector=USART1_RX_vect
     82          __interrupt void _lin_it_uart_rx_not_used (void){
     83            ;
     84          }
     85          #pragma vector=USART0_RX_vect
     86          #endif
     87          #endif
     88          
     89          #ifdef ATMEGA168_USED
     90          #pragma vector=USART_RX_vect
     91          #endif
     92          
     93          #ifdef ATMEGA88_USED
     94          #pragma vector=USART_RX_vect
     95          #endif
     96          
     97          #ifdef ATMEGA48_USED
     98          #pragma vector=USART_RX_vect
     99          #endif
    100          
    101          
    102          #ifdef AT90PWM3_USED
    103          #pragma vector=USART_RXC_vect
    104          #endif
    105          
    106          /**
    107          * @fn _lin_it_uart_rx
    108          * @brief This interrupt function manages the State machine of the LIN.
    109          * The receive interrrupt is used to be able to check at each byte
    110          * if the byte monitored (received) is the same than  byte sent.
    111          **/
    112          

   \                                 In  segment CODE, align 2, keep-with-next
    113          __interrupt void _lin_it_uart_rx (void) {
   \                     _lin_it_uart_rx:
   \   00000000   93AA               ST      -Y, R26
   \   00000002   939A               ST      -Y, R25
   \   00000004   938A               ST      -Y, R24
   \   00000006   93FA               ST      -Y, R31
   \   00000008   93EA               ST      -Y, R30
   \   0000000A   923A               ST      -Y, R3
   \   0000000C   922A               ST      -Y, R2
   \   0000000E   921A               ST      -Y, R1
   \   00000010   920A               ST      -Y, R0
   \   00000012   937A               ST      -Y, R23
   \   00000014   936A               ST      -Y, R22
   \   00000016   935A               ST      -Y, R21
   \   00000018   934A               ST      -Y, R20
   \   0000001A   933A               ST      -Y, R19
   \   0000001C   932A               ST      -Y, R18
   \   0000001E   931A               ST      -Y, R17
   \   00000020   930A               ST      -Y, R16
   \   00000022   B79F               IN      R25, 0x3F
   \   00000024   B7AB               IN      R26, 0x3B
    114            switch (_lin_state)  {
   \   00000026   9100....           LDS     R16, _lin_state
   \   0000002A   ....               LDI     R30, LOW(`?<Jumptable for _lin_it_uart_rx>_0`)
   \   0000002C   ....               LDI     R31, (`?<Jumptable for _lin_it_uart_rx>_0`) >> 16
   \   0000002E   BFFB               OUT     0x3B, R31
   \   00000030   ....               LDI     R31, HIGH(`?<Jumptable for _lin_it_uart_rx>_0`)
   \   00000032   ........           JMP     ?CV_SWITCH_L06
    115          
    116              /** STATE_CHECK_BREAK: This state is used for both SLAVE and MASTER
    117              * configuration.
    118              * This step checks that a valid SYNCHBREAK character has been sent/received.
    119              * Note:
    120              *    in MASTER, the checksum is computed and the synchro character is
    121              * sent
    122              */
    123            case STATE_CHECK_BREAK:
    124              if (0x00 == Uart_get_byte()){  //NO STOP BIT CHECK HERE !!
   \                     ??_lin_it_uart_rx_0:
   \   00000036   9100....           LDS     R16, _A_UDR1
   \   0000003A   2300               TST     R16
   \   0000003C   F4F9               BRNE    ??_lin_it_uart_rx_1
    125                Uart_set_baudrate(UART_BAUDRATE_NORM);
   \   0000003E   E109               LDI     R16, 25
   \   00000040   E010               LDI     R17, 0
   \   00000042   ....               RCALL   Uart_set_baudrate
    126          #ifdef _RUN_TIME_RC_CALIBRATION_ENABLE
    127                Start_Capturing();
    128                OSCCAL = osccal_start;
    129          #endif
    130                switch(_lin_cmd){
   \   00000044   9100....           LDS     R16, _lin_cmd
   \   00000048   5001               SUBI    R16, 1
   \   0000004A   F061               BREQ    ??_lin_it_uart_rx_2
   \   0000004C   950A               DEC     R16
   \   0000004E   F051               BREQ    ??_lin_it_uart_rx_2
   \   00000050   950A               DEC     R16
   \   00000052   F011               BREQ    ??_lin_it_uart_rx_3
   \   00000054   950A               DEC     R16
   \   00000056   F481               BRNE    ??_lin_it_uart_rx_4
    131                case LIN_CF_S_TX: // no break, kiitos;
    132                case LIN_CF_S_RX:
    133          
    134          #ifdef _TIMOUT_DETECTION
    135                  Timer2_start(TIMEOUT_S_HEADER,0);
   \                     ??_lin_it_uart_rx_3:
   \   00000058   E020               LDI     R18, 0
   \   0000005A   EB09               LDI     R16, 185
   \   0000005C   E010               LDI     R17, 0
   \   0000005E   ........           CALL    Timer2_start
    136          #endif
    137                  _lin_state = STATE_CHECK_SYNC;
   \   00000062   C00A               RJMP    ??_lin_it_uart_rx_4
    138                  break;
    139          
    140                case LIN_CF_M_TX:
    141                case LIN_CF_M_RX:
    142                  Uart_send_byte(0x55);
   \                     ??_lin_it_uart_rx_2:
   \   00000064   E505               LDI     R16, 85
   \   00000066   9300....           STS     _A_UDR1, R16
    143                  _lin_crc = LIN_CalcChecksum();
   \   0000006A   ........           CALL    LIN_CalcChecksum
   \   0000006E   E010               LDI     R17, 0
   \   00000070   9300....           STS     _lin_crc, R16
   \   00000074   9310....           STS     (_lin_crc + 1), R17
    144                  _lin_state = STATE_CHECK_SYNC;
    145                  break;
    146          
    147                default:
    148                  _lin_state = STATE_CHECK_SYNC;
   \                     ??_lin_it_uart_rx_4:
   \   00000078   E001               LDI     R16, 1
   \   0000007A   C0D8               RJMP    ??_lin_it_uart_rx_5
    149                  break;
    150                }
    151              }else{
    152          #ifdef _TIMOUT_DETECTION
    153                Timer2_stop();
   \                     ??_lin_it_uart_rx_1:
   \   0000007C   ........           CALL    Timer2_stop
    154          #endif
    155                _lin_state = STATE_CHECK_BREAK;
   \   00000080   E000               LDI     R16, 0
   \   00000082   C0D4               RJMP    ??_lin_it_uart_rx_5
    156              }
    157              break;
    158          
    159          
    160              /** STATE_CHECK_SYNC: This state is used for both MASTER and SLAVE
    161              * configurations. This step verifies that a valid synchro byte has
    162              * been (sent/received).
    163              * Note:
    164              *   in MASTER,the parity is computed and the identifier is sent
    165              */
    166            case STATE_CHECK_SYNC:
    167              /*  if (Uart_get_error()){
    168              Timer2_stop();
    169              _lin_err = MSK_STATUS_ERRBIT;
    170              _lin_status = MSK_STATUS_ERR;
    171              _lin_state = STATE_CHECK_BREAK;
    172              Uart_set_baudrate(UART_BAUDRATE_SYNC);
    173            }else  if ((0x55 == Uart_get_byte()) ){
    174              */
    175              if ((0x55 == Uart_get_byte()) ){
   \                     ??_lin_it_uart_rx_6:
   \   00000084   9100....           LDS     R16, _A_UDR1
   \   00000088   3505               CPI     R16, 85
   \   0000008A   F4A1               BRNE    ??_lin_it_uart_rx_7
    176                switch(_lin_cmd){
   \   0000008C   9100....           LDS     R16, _lin_cmd
   \   00000090   5001               SUBI    R16, 1
   \   00000092   F011               BREQ    ??_lin_it_uart_rx_8
   \   00000094   950A               DEC     R16
   \   00000096   F461               BRNE    ??_lin_it_uart_rx_9
    177                case LIN_CF_M_TX:
    178                case LIN_CF_M_RX:
    179                  //compute whole ID here for example, INCLUNDING P0 / P1 parity  bits
    180                  _lin_id_w_parity = LIN_InitIdField(_lin_id ); //add P0/P1 parity bits
   \                     ??_lin_it_uart_rx_8:
   \   00000098   9100....           LDS     R16, _lin_id
   \   0000009C   ........           CALL    LIN_InitIdField
   \   000000A0   9300....           STS     _lin_id_w_parity, R16
    181                  Uart_send_byte(_lin_id_w_parity);
   \   000000A4   9100....           LDS     R16, _lin_id_w_parity
   \   000000A8   9300....           STS     _A_UDR1, R16
    182                  _lin_state = STATE_ID_TX;
   \   000000AC   E002               LDI     R16, 2
   \   000000AE   C0BE               RJMP    ??_lin_it_uart_rx_5
    183                  break;
    184                default: // in slave mode
    185                  _lin_state = STATE_ID_RX;
   \                     ??_lin_it_uart_rx_9:
   \   000000B0   E003               LDI     R16, 3
   \   000000B2   C0BC               RJMP    ??_lin_it_uart_rx_5
    186                  break;
    187                }
    188              }else{
    189          #ifdef _TIMOUT_DETECTION
    190                Timer2_stop();
   \                     ??_lin_it_uart_rx_7:
   \   000000B4   ........           CALL    Timer2_stop
    191          #endif
    192                _lin_state = STATE_CHECK_BREAK;
   \   000000B8   E000               LDI     R16, 0
   \   000000BA   9300....           STS     _lin_state, R16
    193                _lin_status = MSK_STATUS_ERR;
   \   000000BE   E008               LDI     R16, 8
   \   000000C0   9300....           STS     _lin_status, R16
    194                switch(_lin_cmd){
   \   000000C4   9100....           LDS     R16, _lin_cmd
   \   000000C8   5001               SUBI    R16, 1
   \   000000CA   F011               BREQ    ??_lin_it_uart_rx_10
   \   000000CC   950A               DEC     R16
   \   000000CE   F411               BRNE    ??_lin_it_uart_rx_11
    195                case LIN_CF_M_TX:
    196                case LIN_CF_M_RX:
    197                  _lin_err   = MSK_STATUS_ERRBIT;
   \                     ??_lin_it_uart_rx_10:
   \   000000D0   E001               LDI     R16, 1
   \   000000D2   C001               RJMP    ??_lin_it_uart_rx_12
    198                  break;
    199                default: // in slave mode
    200                  _lin_err = MSK_STATUS_ERRSYNCHRO;
   \                     ??_lin_it_uart_rx_11:
   \   000000D4   E008               LDI     R16, 8
   \                     ??_lin_it_uart_rx_12:
   \   000000D6   9300....           STS     _lin_err, R16
    201                  break;
   \   000000DA   C0CB               RJMP    ??_lin_it_uart_rx_13
    202                }
    203              }
    204              break;
    205          
    206              /** STATE_ID_TX: This state is used only in MASTER
    207              * configuration. This step verifies if the lin indentifier has
    208              * been correctly sent.
    209              * Note:
    210              *   in Tx frame, the master starts sending data.
    211              *   in Tx request, the master switches in data reception mode,
    212              * The number of data to received is computed.
    213              */
    214            case STATE_ID_TX:
    215              if (Uart_get_error()){
   \                     ??_lin_it_uart_rx_14:
   \   000000DC   9100....           LDS     R16, _A_UCSR1A
   \   000000E0   FD04               SBRC    R16, 4
   \   000000E2   C0A7               RJMP    ??_lin_it_uart_rx_15
    216          #ifdef _TIMOUT_DETECTION
    217                Timer2_stop();
    218          #endif
    219                _lin_err = MSK_STATUS_ERRBIT;
    220                _lin_status = MSK_STATUS_ERR;
    221                _lin_state = STATE_CHECK_BREAK;
    222                Uart_set_baudrate(UART_BAUDRATE_SYNC);
    223              }else if((_lin_id_w_parity == Uart_get_byte())){
   \   000000E4   9100....           LDS     R16, _lin_id_w_parity
   \   000000E8   9110....           LDS     R17, _A_UDR1
   \   000000EC   1701               CP      R16, R17
   \   000000EE   F4F9               BRNE    ??_lin_it_uart_rx_16
    224                switch (_lin_cmd){
   \   000000F0   9100....           LDS     R16, _lin_cmd
   \   000000F4   5001               SUBI    R16, 1
   \   000000F6   F019               BREQ    ??_lin_it_uart_rx_17
   \   000000F8   950A               DEC     R16
   \   000000FA   F1E1               BREQ    ??_lin_it_uart_rx_18
   \   000000FC   C0BA               RJMP    ??_lin_it_uart_rx_13
    225                case LIN_CF_M_TX:
    226                  _lin_index = Lin_dlctonbyte(_lin_id);
   \                     ??_lin_it_uart_rx_17:
   \   000000FE   9100....           LDS     R16, _lin_id
   \   00000102   ....               RCALL   Lin_dlctonbyte
   \   00000104   9300....           STS     _lin_index, R16
    227                  if (_lin_index){
   \   00000108   9100....           LDS     R16, _lin_index
   \   0000010C   2300               TST     R16
   \   0000010E   F409               BRNE    $+2+2
   \   00000110   C0B0               RJMP    ??_lin_it_uart_rx_13
    228                    Uart_send_byte(_lin_tab_data[0x00]);
   \   00000112   9100....           LDS     R16, _lin_tab_data
   \   00000116   9300....           STS     _A_UDR1, R16
    229                    _lin_state = STATE_DATA_TX;
   \   0000011A   E004               LDI     R16, 4
   \   0000011C   9300....           STS     _lin_state, R16
    230                    _lin_index--;
   \   00000120   9100....           LDS     R16, _lin_index
   \   00000124   950A               DEC     R16
   \   00000126   9300....           STS     _lin_index, R16
    231                    _lin_cpt = 0x01;
   \   0000012A   E001               LDI     R16, 1
   \   0000012C   C075               RJMP    ??_lin_it_uart_rx_19
    232                  }else{
    233                    /* to be defined */
    234                  }
    235                  break;
    236          
    237                case LIN_CF_M_RX:
    238                  _lin_state = STATE_DATA_RX;
    239                  _lin_cpt  = 0x00;
    240                  _lin_index = Lin_dlctonbyte(_lin_id);
    241                  break;
    242          
    243                default:
    244                  break;
    245                }
    246              }else{
    247          #ifdef _TIMOUT_DETECTION
    248                Timer2_stop();
   \                     ??_lin_it_uart_rx_16:
   \   0000012E   ........           CALL    Timer2_stop
    249          #endif
    250                _lin_state = STATE_CHECK_BREAK;
   \   00000132   E000               LDI     R16, 0
   \   00000134   9300....           STS     _lin_state, R16
    251                _lin_err = MSK_STATUS_ERRBIT;
   \   00000138   E001               LDI     R16, 1
   \   0000013A   9300....           STS     _lin_err, R16
    252                _lin_status = MSK_STATUS_ERR;
   \   0000013E   E008               LDI     R16, 8
   \   00000140   9300....           STS     _lin_status, R16
    253                Uart_set_baudrate(UART_BAUDRATE_SYNC);
   \   00000144   C093               RJMP    ??_lin_it_uart_rx_20
    254              }
    255              break;
    256          
    257              /** STATE_ID_RX: This state is used only in SLAVE configuration.
    258              * This step verifies that a valid indentifier has beeen received.
    259              * Note: the number of data to be received is computed.
    260              */
    261            case STATE_ID_RX:
    262              _lin_id = Uart_get_byte();
   \                     ??_lin_it_uart_rx_21:
   \   00000146   9100....           LDS     R16, _A_UDR1
   \   0000014A   9300....           STS     _lin_id, R16
    263          #ifdef _TIMOUT_DETECTION
    264              Timer2_stop();
   \   0000014E   ........           CALL    Timer2_stop
    265          #endif
    266              //check for parity error or frame error
    267              if ((_lin_id != LIN_InitIdField(_lin_id)) || ( Uart_get_error() )){
   \   00000152   9180....           LDS     R24, _lin_id
   \   00000156   9100....           LDS     R16, _lin_id
   \   0000015A   ........           CALL    LIN_InitIdField
   \   0000015E   1780               CP      R24, R16
   \   00000160   F421               BRNE    ??_lin_it_uart_rx_22
   \   00000162   9100....           LDS     R16, _A_UCSR1A
   \   00000166   FF04               SBRS    R16, 4
   \   00000168   C002               RJMP    ??_lin_it_uart_rx_23
    268                _lin_err = MSK_STATUS_ERRPARITY;
   \                     ??_lin_it_uart_rx_22:
   \   0000016A   E004               LDI     R16, 4
   \   0000016C   C065               RJMP    ??_lin_it_uart_rx_24
    269                _lin_status = MSK_STATUS_ERR;
    270                _lin_state = STATE_CHECK_BREAK;
    271                Uart_set_baudrate(UART_BAUDRATE_SYNC);
    272              }else{
    273                _lin_status = MSK_STATUS_IDOK;
   \                     ??_lin_it_uart_rx_23:
   \   0000016E   E004               LDI     R16, 4
   \   00000170   9300....           STS     _lin_status, R16
    274                _lin_state = STATE_DATA_RX;
   \                     ??_lin_it_uart_rx_18:
   \   00000174   E005               LDI     R16, 5
   \   00000176   9300....           STS     _lin_state, R16
    275                _lin_cpt =0;
   \   0000017A   E000               LDI     R16, 0
   \   0000017C   9300....           STS     _lin_cpt, R16
    276                _lin_index = Lin_dlctonbyte(_lin_id);
   \   00000180   9100....           LDS     R16, _lin_id
   \   00000184   ....               RCALL   Lin_dlctonbyte
   \   00000186   9300....           STS     _lin_index, R16
   \   0000018A   C073               RJMP    ??_lin_it_uart_rx_13
    277              }
    278              break;
    279          
    280              /** STATE_DATA_RX: This state is used for both SLAVE and MASTER
    281              * configurations (SLAVE TASK).This step stores the incoming data into the temp buffer.
    282              * Note:
    283              *    The number of data to store was computed and stored in _lin_index.
    284              */
    285            case STATE_DATA_RX:
    286              if (Uart_get_error()){
   \                     ??_lin_it_uart_rx_25:
   \   0000018C   9100....           LDS     R16, _A_UCSR1A
   \   00000190   FD04               SBRC    R16, 4
   \   00000192   C04F               RJMP    ??_lin_it_uart_rx_15
    287          #ifdef _TIMOUT_DETECTION
    288                Timer2_stop();
    289          #endif
    290                _lin_err = MSK_STATUS_ERRBIT;
    291                _lin_status = MSK_STATUS_ERR;
    292                _lin_state = STATE_CHECK_BREAK;
    293                Uart_set_baudrate(UART_BAUDRATE_SYNC);
    294              } else {
    295                _lin_tab_data[_lin_cpt]=Uart_get_byte();
   \   00000194   9100....           LDS     R16, _lin_cpt
   \   00000198   9120....           LDS     R18, _A_UDR1
   \   0000019C   E0F0               LDI     R31, 0
   \   0000019E   2FE0               MOV     R30, R16
   \   000001A0   ....               SUBI    R30, LOW((-(_lin_tab_data) & 0xFFFF))
   \   000001A2   ....               SBCI    R31, (-(_lin_tab_data) & 0xFFFF) >> 8
   \   000001A4   8320               ST      Z, R18
    296                _lin_cpt++;
   \   000001A6   9100....           LDS     R16, _lin_cpt
   \   000001AA   9503               INC     R16
   \   000001AC   9300....           STS     _lin_cpt, R16
    297                if(_lin_cpt == _lin_index){
   \   000001B0   9100....           LDS     R16, _lin_cpt
   \   000001B4   9110....           LDS     R17, _lin_index
   \   000001B8   1701               CP      R16, R17
   \   000001BA   F009               BREQ    $+2+2
   \   000001BC   C05A               RJMP    ??_lin_it_uart_rx_13
    298                  _lin_crc  =  LIN_CalcChecksum();
   \   000001BE   ........           CALL    LIN_CalcChecksum
   \   000001C2   E010               LDI     R17, 0
   \   000001C4   9300....           STS     _lin_crc, R16
   \   000001C8   9310....           STS     (_lin_crc + 1), R17
    299                  _lin_state = STATE_CRC_RX;
   \   000001CC   E007               LDI     R16, 7
   \   000001CE   C02E               RJMP    ??_lin_it_uart_rx_5
    300                }
    301              }
    302              break;
    303          
    304              /** STATE_DATA_TX: This state is used for both SLAVE and MASTER
    305              * configurations (SLAVE TASK). This step verifies that previous
    306              * sent data byte was not corrupted, and next byte is sent.
    307              * Note:
    308              *  The number of data to transmit was computed and stored in
    309              * _lin_index.
    310              */
    311            case STATE_DATA_TX:
    312              if (Uart_get_error()){//stop bit error
   \                     ??_lin_it_uart_rx_26:
   \   000001D0   9100....           LDS     R16, _A_UCSR1A
   \   000001D4   FD04               SBRC    R16, 4
   \   000001D6   C02D               RJMP    ??_lin_it_uart_rx_15
    313          #ifdef _TIMOUT_DETECTION
    314                Timer2_stop();
    315          #endif
    316                _lin_err = MSK_STATUS_ERRBIT;
    317                _lin_status = MSK_STATUS_ERR;
    318                _lin_state = STATE_CHECK_BREAK;
    319                Uart_set_baudrate(UART_BAUDRATE_SYNC);
    320              }else if ((_lin_tab_data[ _lin_cpt-1 ] == Uart_get_byte())  ){
   \   000001D8   9100....           LDS     R16, _lin_cpt
   \   000001DC   E0F0               LDI     R31, 0
   \   000001DE   2FE0               MOV     R30, R16
   \   000001E0   ....               SUBI    R30, LOW((-(_lin_tab_data - 1) & 0xFFFF))
   \   000001E2   ....               SBCI    R31, HIGH((-(_lin_tab_data - 1) & 0xFFFF))
   \   000001E4   8100               LD      R16, Z
   \   000001E6   9110....           LDS     R17, _A_UDR1
   \   000001EA   1701               CP      R16, R17
   \   000001EC   F511               BRNE    ??_lin_it_uart_rx_15
    321                if (_lin_index){
   \   000001EE   9100....           LDS     R16, _lin_index
   \   000001F2   2300               TST     R16
   \   000001F4   F0A1               BREQ    ??_lin_it_uart_rx_27
    322                  Uart_send_byte(_lin_tab_data[_lin_cpt]);
   \   000001F6   9100....           LDS     R16, _lin_cpt
   \   000001FA   E0F0               LDI     R31, 0
   \   000001FC   2FE0               MOV     R30, R16
   \   000001FE   ....               SUBI    R30, LOW((-(_lin_tab_data) & 0xFFFF))
   \   00000200   ....               SBCI    R31, (-(_lin_tab_data) & 0xFFFF) >> 8
   \   00000202   8100               LD      R16, Z
   \   00000204   9300....           STS     _A_UDR1, R16
    323                  _lin_index--;
   \   00000208   9100....           LDS     R16, _lin_index
   \   0000020C   950A               DEC     R16
   \   0000020E   9300....           STS     _lin_index, R16
    324                  _lin_cpt++;
   \   00000212   9100....           LDS     R16, _lin_cpt
   \   00000216   9503               INC     R16
   \                     ??_lin_it_uart_rx_19:
   \   00000218   9300....           STS     _lin_cpt, R16
   \   0000021C   C02A               RJMP    ??_lin_it_uart_rx_13
    325                }else{
    326                  Uart_send_byte( _lin_crc);
   \                     ??_lin_it_uart_rx_27:
   \   0000021E   9100....           LDS     R16, _lin_crc
   \   00000222   9110....           LDS     R17, (_lin_crc + 1)
   \   00000226   9300....           STS     _A_UDR1, R16
    327                  _lin_state = STATE_CRC_TX;
   \   0000022A   E006               LDI     R16, 6
   \                     ??_lin_it_uart_rx_5:
   \   0000022C   9300....           STS     _lin_state, R16
   \   00000230   C020               RJMP    ??_lin_it_uart_rx_13
    328                }
    329              }else{
    330          #ifdef _TIMOUT_DETECTION
    331                Timer2_stop();
   \                     ??_lin_it_uart_rx_15:
   \   00000232   ........           CALL    Timer2_stop
    332          #endif
    333                _lin_err = MSK_STATUS_ERRBIT;
   \   00000236   E001               LDI     R16, 1
   \                     ??_lin_it_uart_rx_24:
   \   00000238   9300....           STS     _lin_err, R16
    334                _lin_status = MSK_STATUS_ERR;
   \   0000023C   E008               LDI     R16, 8
   \   0000023E   9300....           STS     _lin_status, R16
    335                _lin_state = STATE_CHECK_BREAK;
   \   00000242   C011               RJMP    ??_lin_it_uart_rx_28
    336                Uart_set_baudrate(UART_BAUDRATE_SYNC);
    337              }
    338              break;
    339          
    340              /** STATE_CRC_RX: This state is used for both SLAVE and MASTER
    341              * configurations (SLAVE TASK). This step verifies that a valid checksum has been received .
    342              * Note:
    343              *    If the CRC is correct then the status RXOK is returned.
    344              */
    345            case STATE_CRC_RX:
    346              if (Uart_get_error()) {
   \                     ??_lin_it_uart_rx_29:
   \   00000244   9100....           LDS     R16, _A_UCSR1A
   \   00000248   FD04               SBRC    R16, 4
   \   0000024A   C02B               RJMP    ??_lin_it_uart_rx_30
    347                _lin_err = MSK_STATUS_ERRBIT;
    348                _lin_status = MSK_STATUS_ERR;
    349              } else if ( ((_lin_crc) & (0x00FF)) != Uart_get_byte() ) {
   \   0000024C   9100....           LDS     R16, _lin_crc
   \   00000250   9110....           LDS     R17, (_lin_crc + 1)
   \   00000254   9110....           LDS     R17, _A_UDR1
   \   00000258   1701               CP      R16, R17
   \   0000025A   F581               BRNE    ??_lin_it_uart_rx_31
    350                _lin_err = MSK_STATUS_ERRCSUM;
    351                _lin_status = MSK_STATUS_ERR;
    352              }else{
    353                _lin_status = MSK_STATUS_RXOK;
   \   0000025C   E001               LDI     R16, 1
   \                     ??_lin_it_uart_rx_32:
   \   0000025E   9300....           STS     _lin_status, R16
    354              }
    355          #ifdef _TIMOUT_DETECTION
    356              Timer2_stop();
    357          #endif
    358              _lin_state = STATE_CHECK_BREAK;
    359              Uart_set_baudrate(UART_BAUDRATE_SYNC);
    360              break;
    361          
    362              /** STATE_CRC_TX: This state is used for both SLAVE and MASTER
    363              * configurations (SLAVE TASK). This state verifies if CRC byte has been
    364              * correctly sent (bit error detection).
    365              * Note:
    366              *    If the CRC is correct then the status TXOK is returned.
    367              */
    368            case STATE_CRC_TX:
    369              if (Uart_get_error()) { //check frame error (stop bit)
    370                _lin_err = MSK_STATUS_ERRBIT;
    371                _lin_status = MSK_STATUS_ERR;
    372              }else  if (((_lin_crc) & 0xFF) != Uart_get_byte()){
    373                _lin_err = MSK_STATUS_ERRCSUM;
    374                _lin_status = MSK_STATUS_ERR;
    375              }else{
    376                _lin_status = MSK_STATUS_TXOK;
    377              }
    378          #ifdef _TIMOUT_DETECTION
    379              Timer2_stop();
    380          #endif
    381              _lin_state = STATE_CHECK_BREAK;
    382              Uart_set_baudrate(UART_BAUDRATE_SYNC);
    383              break;
    384          
    385              /** STATE_SLEEP: This state is used for both MASTER and SLAVE
    386              * configurations. This step is used to memeorize that controller is in sleep mode.
    387              * Note:
    388              *
    389              */
    390          #ifdef _SLEEP_TIMOUT_DETECTION
    391            case STATE_SLEEP:
    392              _lin_err = MSK_STATUS_SLEEP_MODE;
    393              _lin_status = MSK_STATUS_ERR;
    394          
    395              if( Uart_get_byte()==0x80) {
    396          #if LIN_CONFIG == 0 //1:slave 0:master
    397                lin_master_in_sleep_mode = 0;
    398          #elif LIN_CONFIG == 1 //1:slave 0:master
    399                NoBusActivityFlag = 0;
    400                SleepCtr = 0;
    401          #else
    402          #error "  "
    403          #endif
    404                _lin_status = MSK_STATUS_RXOK;
    405                _lin_err = MSK_STATUS_SLEEP_MODE;
    406                LINSleepFlag = 0;
    407                _lin_state = STATE_CHECK_BREAK;
    408                Uart_set_baudrate(UART_BAUDRATE_SYNC);
    409              }
    410              break;
    411          #endif
    412          
    413            default:
    414          #ifdef _TIMOUT_DETECTION
    415              Timer2_stop();
   \                     ??_lin_it_uart_rx_33:
   \   00000262   ........           CALL    Timer2_stop
    416          #endif
    417              _lin_state = STATE_CHECK_BREAK;
   \                     ??_lin_it_uart_rx_28:
   \   00000266   E000               LDI     R16, 0
   \                     ??_lin_it_uart_rx_34:
   \   00000268   9300....           STS     _lin_state, R16
    418              Uart_set_baudrate(UART_BAUDRATE_SYNC);
   \                     ??_lin_it_uart_rx_20:
   \   0000026C   E205               LDI     R16, 37
   \   0000026E   E010               LDI     R17, 0
   \   00000270   ....               RCALL   Uart_set_baudrate
    419              break;
    420          
    421            }//end case
    422          }//end usart rxc isr
   \                     ??_lin_it_uart_rx_13:
   \   00000272   BFAB               OUT     0x3B, R26
   \   00000274   BF9F               OUT     0x3F, R25
   \   00000276   9109               LD      R16, Y+
   \   00000278   9119               LD      R17, Y+
   \   0000027A   9129               LD      R18, Y+
   \   0000027C   9139               LD      R19, Y+
   \   0000027E   9149               LD      R20, Y+
   \   00000280   9159               LD      R21, Y+
   \   00000282   9169               LD      R22, Y+
   \   00000284   9179               LD      R23, Y+
   \   00000286   9009               LD      R0, Y+
   \   00000288   9019               LD      R1, Y+
   \   0000028A   9029               LD      R2, Y+
   \   0000028C   9039               LD      R3, Y+
   \   0000028E   91E9               LD      R30, Y+
   \   00000290   91F9               LD      R31, Y+
   \   00000292   9189               LD      R24, Y+
   \   00000294   9199               LD      R25, Y+
   \   00000296   91A9               LD      R26, Y+
   \   00000298   9518               RETI
   \                     ??_lin_it_uart_rx_35:
   \   0000029A   9100....           LDS     R16, _A_UCSR1A
   \   0000029E   FF04               SBRS    R16, 4
   \   000002A0   C005               RJMP    ??_lin_it_uart_rx_36
   \                     ??_lin_it_uart_rx_30:
   \   000002A2   E001               LDI     R16, 1
   \                     ??_lin_it_uart_rx_37:
   \   000002A4   9300....           STS     _lin_err, R16
   \   000002A8   E008               LDI     R16, 8
   \   000002AA   CFD9               RJMP    ??_lin_it_uart_rx_32
   \                     ??_lin_it_uart_rx_36:
   \   000002AC   9100....           LDS     R16, _lin_crc
   \   000002B0   9110....           LDS     R17, (_lin_crc + 1)
   \   000002B4   9110....           LDS     R17, _A_UDR1
   \   000002B8   1701               CP      R16, R17
   \   000002BA   F011               BREQ    ??_lin_it_uart_rx_38
   \                     ??_lin_it_uart_rx_31:
   \   000002BC   E002               LDI     R16, 2
   \   000002BE   CFF2               RJMP    ??_lin_it_uart_rx_37
   \                     ??_lin_it_uart_rx_38:
   \   000002C0   E002               LDI     R16, 2
   \   000002C2   CFCD               RJMP    ??_lin_it_uart_rx_32
   \                     ??_lin_it_uart_rx_39:
   \   000002C4   E400               LDI     R16, 64
   \   000002C6   9300....           STS     _lin_err, R16
   \   000002CA   E008               LDI     R16, 8
   \   000002CC   9300....           STS     _lin_status, R16
   \   000002D0   9100....           LDS     R16, _A_UDR1
   \   000002D4   3800               CPI     R16, 128
   \   000002D6   F669               BRNE    ??_lin_it_uart_rx_13
   \   000002D8   E000               LDI     R16, 0
   \   000002DA   9300....           STS     lin_master_in_sleep_mode, R16
   \   000002DE   E001               LDI     R16, 1
   \   000002E0   9300....           STS     _lin_status, R16
   \   000002E4   E400               LDI     R16, 64
   \   000002E6   9300....           STS     _lin_err, R16
   \   000002EA   E000               LDI     R16, 0
   \   000002EC   9300....           STS     LINSleepFlag, R16
   \   000002F0   CFBB               RJMP    ??_lin_it_uart_rx_34
   \   000002F2                      REQUIRE _A_UDR1
   \   000002F2                      REQUIRE _A_UCSR1A
    423          
    424          /**
    425          * @fn _lin_dlctonbyte
    426          * @brief extract dlc info from a full 6 bits LIN Identifier
    427          *
    428          **/

   \                                 In  segment CODE, align 2, keep-with-next
    429          U8 Lin_dlctonbyte(U8 _lin_id){
   \                     Lin_dlctonbyte:
    430            _lin_index = (_lin_id&0x30) >>4;
   \   00000000   9502               SWAP    R16
   \   00000002   7003               ANDI    R16, 0x03
   \   00000004   9300....           STS     _lin_index, R16
    431          #ifdef _TIMOUT_DETECTION
    432            Timer2_stop();
   \   00000008   ........           CALL    Timer2_stop
    433          #endif
    434            if (_lin_index < 2){
   \   0000000C   9100....           LDS     R16, _lin_index
   \   00000010   3002               CPI     R16, 2
   \   00000012   F438               BRCC    ??Lin_dlctonbyte_0
    435          #ifdef _TIMOUT_DETECTION
    436              Timer2_start(TIMEOUT_RESPONSE_2DATA,2);
   \   00000014   E022               LDI     R18, 2
   \   00000016   EB0A               LDI     R16, 186
   \   00000018   E010               LDI     R17, 0
   \   0000001A   ........           CALL    Timer2_start
    437          #endif
    438              _lin_index = 2;
   \   0000001E   E002               LDI     R16, 2
   \   00000020   C011               RJMP    ??Lin_dlctonbyte_1
    439            }else if (2 == _lin_index){
   \                     ??Lin_dlctonbyte_0:
   \   00000022   9100....           LDS     R16, _lin_index
   \   00000026   3002               CPI     R16, 2
   \   00000028   F439               BRNE    ??Lin_dlctonbyte_2
    440          #ifdef _TIMOUT_DETECTION
    441              Timer2_start(TIMEOUT_RESPONSE_4DATA,4);
   \   0000002A   E024               LDI     R18, 4
   \   0000002C   E80D               LDI     R16, 141
   \   0000002E   E010               LDI     R17, 0
   \   00000030   ........           CALL    Timer2_start
    442          #endif
    443              _lin_index = 4;
   \   00000034   E004               LDI     R16, 4
   \   00000036   C006               RJMP    ??Lin_dlctonbyte_1
    444            }else{
    445          #ifdef _TIMOUT_DETECTION
    446              Timer2_start(TIMEOUT_RESPONSE_8DATA,8);
   \                     ??Lin_dlctonbyte_2:
   \   00000038   E028               LDI     R18, 8
   \   0000003A   E301               LDI     R16, 49
   \   0000003C   E010               LDI     R17, 0
   \   0000003E   ........           CALL    Timer2_start
    447          #endif
    448              _lin_index = 8;
   \   00000042   E008               LDI     R16, 8
   \                     ??Lin_dlctonbyte_1:
   \   00000044   9300....           STS     _lin_index, R16
    449            }
    450            return _lin_index;
   \   00000048   9100....           LDS     R16, _lin_index
   \   0000004C   9508               RET
    451          }
    452          
    453          /**
    454          * @fn uart_set_baudrate
    455          * @brief initiatilisation of USART baud rate register
    456          **/

   \                                 In  segment CODE, align 2, keep-with-next
    457          void Uart_set_baudrate(U16 expected_baudrate ) {
   \                     Uart_set_baudrate:
    458          
    459          #ifdef  USE_UART1
    460            UBRR0 =  expected_baudrate;
    461          #endif
    462          
    463          #ifdef  USE_UART2
    464            UBRR1 =  expected_baudrate;
   \   00000000   9310....           STS     (_A_UBRR1 + 1), R17
   \   00000004   9300....           STS     _A_UBRR1, R16
    465          #endif
    466          }
   \   00000008   9508               RET
   \   0000000A                      REQUIRE _A_UBRR1
    467          
    468          /**
    469          * @fn _lin_cmdm_txdata
    470          * @brief .
    471          **/

   \                                 In  segment CODE, align 2, keep-with-next
    472          void Lin_cmdm_txdata(void){
   \                     Lin_cmdm_txdata:
    473          #ifdef _TIMOUT_DETECTION
    474            Timer2_start(TIMEOUT_M_HEADER,0);
   \   00000000   E020               LDI     R18, 0
   \   00000002   EA0F               LDI     R16, 175
   \   00000004   E010               LDI     R17, 0
   \   00000006   ........           CALL    Timer2_start
    475          #endif
    476            Uart_set_baudrate(UART_BAUDRATE_SYNC_MASTER);
   \   0000000A   E205               LDI     R16, 37
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   ....               RCALL   Uart_set_baudrate
    477            Uart_send_byte(0);//send SynchBreak
   \   00000010   E000               LDI     R16, 0
   \   00000012   9300....           STS     _A_UDR1, R16
    478            _lin_status = MSK_STATUS_BSY;
   \   00000016   E100               LDI     R16, 16
   \   00000018   9300....           STS     _lin_status, R16
    479            _lin_cmd =LIN_CF_M_TX;
   \   0000001C   E001               LDI     R16, 1
   \   0000001E                      REQUIRE ?Subroutine0
   \   0000001E                      REQUIRE _A_UDR1
   \   0000001E                      ;               // Fall through to label ?Subroutine0
    480          }

   \                                 In  segment CODE, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   9300....           STS     _lin_cmd, R16
   \   00000004   9508               RET
    481          
    482          /**
    483          * @fn _lin_cmdm_rxdata
    484          * @brief In master mode, Master starts by sending Lin Header
    485          **/

   \                                 In  segment CODE, align 2, keep-with-next
    486          void Lin_cmdm_rxdata(void){
   \                     Lin_cmdm_rxdata:
    487          #ifdef _TIMOUT_DETECTION
    488            Timer2_start(TIMEOUT_M_HEADER,0);
   \   00000000   E020               LDI     R18, 0
   \   00000002   EA0F               LDI     R16, 175
   \   00000004   E010               LDI     R17, 0
   \   00000006   ........           CALL    Timer2_start
    489          #endif
    490            Uart_set_baudrate(UART_BAUDRATE_SYNC_MASTER);
   \   0000000A   E205               LDI     R16, 37
   \   0000000C   E010               LDI     R17, 0
   \   0000000E   ....               RCALL   Uart_set_baudrate
    491            Uart_send_byte(0); //send SynchBreak
   \   00000010   E000               LDI     R16, 0
   \   00000012   9300....           STS     _A_UDR1, R16
    492            _lin_status = MSK_STATUS_BSY;
   \   00000016   E100               LDI     R16, 16
   \   00000018   9300....           STS     _lin_status, R16
    493            _lin_cmd =LIN_CF_M_RX;
   \   0000001C   E002               LDI     R16, 2
   \   0000001E   ....               RJMP    ?Subroutine0
   \   00000020                      REQUIRE _A_UDR1
    494          }
    495          
    496          /**
    497          * @fn performs hardware initialisation
    498          * @brief
    499          **/

   \                                 In  segment CODE, align 2, keep-with-next
    500          void Lin_hw_init(void) {
   \                     Lin_hw_init:
    501            Uart_hw_init(MSK_UART_8BIT);
   \   00000000   E006               LDI     R16, 6
   \   00000002   9300....           STS     _A_UCSR1C, R16
    502            ENABLE_LIN();
   \   00000006   9A38               SBI     0x07, 0x00
   \   00000008   9A40               SBI     0x08, 0x00
    503          
    504          #ifdef ATMEGA168_USED
    505            UCSR0B = (1<<RXEN0 ) | (1<<TXEN0) | (1<<RXCIE0) ;
    506          #endif
    507          
    508          #ifdef ATMEGA88_USED
    509            UCSR0B = (1<<RXEN0 ) | (1<<TXEN0) | (1<<RXCIE0) ;
    510          #endif
    511          
    512          #ifdef ATMEGA48_USED
    513            UCSR0B = (1<<RXEN0 ) | (1<<TXEN0) | (1<<RXCIE0) ;
    514          #endif
    515          
    516          #ifdef AT90PWM3_USED
    517            UCSR0B = (1<<RXEN0 ) | (1<<TXEN0) | (1<<RXCIE0) ;
    518          #endif
    519          
    520          #ifdef AT90CAN128_USED
    521          #ifdef USE_UART2
    522            UCSR1B = (1<< RXEN1 ) | (1<<TXEN1) | (1<<RXCIE1);
   \   0000000A   E908               LDI     R16, 152
   \   0000000C   9300....           STS     _A_UCSR1B, R16
    523          #endif
    524          
    525          #ifdef USE_UART1
    526            UCSR0B = (1<<RXEN0 ) | (1<<TXEN0) | (1<<RXCIE0);
    527          #endif
    528          #endif
    529          }
   \   00000010   9508               RET
   \   00000012                      REQUIRE _A_UCSR1C
   \   00000012                      REQUIRE _A_DDRC
   \   00000012                      REQUIRE _A_PORTC
   \   00000012                      REQUIRE _A_UCSR1B

   \                                 In  segment INTVEC, offset 0x54, root
   \                     `??_lin_it_uart_rx_not_used::??INTVEC 84`:
   \   00000054   ........           JMP     _lin_it_uart_rx_not_used

   \                                 In  segment INTVEC, offset 0x80, root
   \                     `??_lin_it_uart_rx::??INTVEC 128`:
   \   00000080   ........           JMP     _lin_it_uart_rx

   \                                 In  segment SWITCH, align 2, keep-with-next
   \                     `?<Jumptable for _lin_it_uart_rx>_0`:
   \   00000000   00                 DB      0
   \   00000001   00                 DB      0
   \   00000002   ....               DW      (??_lin_it_uart_rx_33) /2
   \   00000004   0009               DW      9
   \   00000006   ....               DW      (??_lin_it_uart_rx_0) /2
   \   00000008   ....               DW      (??_lin_it_uart_rx_6) /2
   \   0000000A   ....               DW      (??_lin_it_uart_rx_14) /2
   \   0000000C   ....               DW      (??_lin_it_uart_rx_21) /2
   \   0000000E   ....               DW      (??_lin_it_uart_rx_26) /2
   \   00000010   ....               DW      (??_lin_it_uart_rx_25) /2
   \   00000012   ....               DW      (??_lin_it_uart_rx_35) /2
   \   00000014   ....               DW      (??_lin_it_uart_rx_29) /2
   \   00000016   ....               DW      (??_lin_it_uart_rx_39) /2
    530          

   Maximum stack usage in bytes:

   CSTACK RSTACK Function
   ------ ------ --------
      0      2   Lin_cmdm_rxdata
        0      2   -> Timer2_start
        0      2   -> Uart_set_baudrate
      0      2   Lin_cmdm_txdata
        0      2   -> Timer2_start
        0      2   -> Uart_set_baudrate
      0      2   Lin_dlctonbyte
        0      2   -> Timer2_start
        0      2   -> Timer2_stop
      0      2   Lin_hw_init
      0      2   Uart_set_baudrate
     17      2   _lin_it_uart_rx
       17      2   -> LIN_CalcChecksum
       17      2   -> LIN_InitIdField
       17      2   -> Lin_dlctonbyte
       17      2   -> Timer2_start
       17      2   -> Timer2_stop
       17      2   -> Uart_set_baudrate
      3      2   _lin_it_uart_rx_not_used


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Jumptable for _lin_it_uart_rx>_0
       6  ?Subroutine0
      32  Lin_cmdm_rxdata
      30  Lin_cmdm_txdata
      78  Lin_dlctonbyte
      18  Lin_hw_init
      10  Uart_set_baudrate
       1  _A_ACSR
       2  _A_ADC
       1  _A_ADCSRA
       1  _A_ADCSRB
       1  _A_ADMUX
       1  _A_ASSR
       1  _A_CANBT1
       1  _A_CANBT2
       1  _A_CANBT3
       1  _A_CANCDMOB
       1  _A_CANEN1
       1  _A_CANEN2
       1  _A_CANGCON
       1  _A_CANGIE
       1  _A_CANGIT
       1  _A_CANGSTA
       1  _A_CANHPMOB
       1  _A_CANIDM1
       1  _A_CANIDM2
       1  _A_CANIDM3
       1  _A_CANIDM4
       1  _A_CANIDT1
       1  _A_CANIDT2
       1  _A_CANIDT3
       1  _A_CANIDT4
       1  _A_CANIE1
       1  _A_CANIE2
       1  _A_CANMSG
       1  _A_CANPAGE
       1  _A_CANREC
       1  _A_CANSIT1
       1  _A_CANSIT2
       2  _A_CANSTM
       1  _A_CANSTMOB
       1  _A_CANTCON
       1  _A_CANTEC
       2  _A_CANTIM
       2  _A_CANTTC
       1  _A_CLKPR
       1  _A_DDRA
       1  _A_DDRB
       1  _A_DDRC
       1  _A_DDRD
       1  _A_DDRE
       1  _A_DDRF
       1  _A_DDRG
       1  _A_DIDR0
       1  _A_DIDR1
       2  _A_EEAR
       1  _A_EECR
       1  _A_EEDR
       1  _A_EICRA
       1  _A_EICRB
       1  _A_EIFR
       1  _A_EIMSK
       1  _A_GPIOR0
       1  _A_GPIOR1
       1  _A_GPIOR2
       1  _A_GTCCR
       2  _A_ICR1
       2  _A_ICR3
       1  _A_MCUCR
       1  _A_MCUSR
       1  _A_OCDR
       1  _A_OCR0A
       2  _A_OCR1A
       2  _A_OCR1B
       2  _A_OCR1C
       1  _A_OCR2A
       2  _A_OCR3A
       2  _A_OCR3B
       2  _A_OCR3C
       1  _A_OSCCAL
       1  _A_PINA
       1  _A_PINB
       1  _A_PINC
       1  _A_PIND
       1  _A_PINE
       1  _A_PINF
       1  _A_PING
       1  _A_PORTA
       1  _A_PORTB
       1  _A_PORTC
       1  _A_PORTD
       1  _A_PORTE
       1  _A_PORTF
       1  _A_PORTG
       1  _A_RAMPZ
       1  _A_SMCR
       2  _A_SP
       1  _A_SPCR
       1  _A_SPDR
       1  _A_SPMCSR
       1  _A_SPSR
       1  _A_SREG
       1  _A_TCCR0A
       1  _A_TCCR1A
       1  _A_TCCR1B
       1  _A_TCCR1C
       1  _A_TCCR2A
       1  _A_TCCR3A
       1  _A_TCCR3B
       1  _A_TCCR3C
       1  _A_TCNT0
       2  _A_TCNT1
       1  _A_TCNT2
       2  _A_TCNT3
       1  _A_TIFR0
       1  _A_TIFR1
       1  _A_TIFR2
       1  _A_TIFR3
       1  _A_TIMSK0
       1  _A_TIMSK1
       1  _A_TIMSK2
       1  _A_TIMSK3
       1  _A_TWAR
       1  _A_TWBR
       1  _A_TWCR
       1  _A_TWDR
       1  _A_TWSR
       2  _A_UBRR0
       2  _A_UBRR1
       1  _A_UCSR0A
       1  _A_UCSR0B
       1  _A_UCSR0C
       1  _A_UCSR1A
       1  _A_UCSR1B
       1  _A_UCSR1C
       1  _A_UDR0
       1  _A_UDR1
       1  _A_WDTCR
       1  _A_XMCRA
       1  _A_XMCRB
       1  _lin_cmd
       1  _lin_cpt
       2  _lin_crc
       1  _lin_err
       1  _lin_id
       1  _lin_id_w_parity
       1  _lin_index
     754  _lin_it_uart_rx
       4  _lin_it_uart_rx::??INTVEC 128
       2  _lin_it_uart_rx_not_used
       4  _lin_it_uart_rx_not_used::??INTVEC 84
       1  _lin_state
       1  _lin_status
       8  _lin_tab_data
       1  lin_master_in_sleep_mode
       7  -- Other

 
 151 bytes in segment ABSOLUTE
 930 bytes in segment CODE
   7 bytes in segment INITTAB
   8 bytes in segment INTVEC
  19 bytes in segment NEAR_Z
  24 bytes in segment SWITCH
 
 954 bytes of CODE memory (+  15 bytes shared)
  19 bytes of DATA memory (+ 151 bytes shared)

Errors: none
Warnings: none
